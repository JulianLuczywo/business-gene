datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

// User model to extend Supabase auth
model User {
  id                String         @id @default(uuid()) @db.Uuid
  email             String         @unique
  name              String?
  image             String?
  emailVerified     DateTime?      @map("email_verified")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  businessIdeas     BusinessIdea[]
  savedIdeas        SavedIdea[]
  subscriptions     Subscription[]
  creditTransactions CreditTransaction[]
  credits           Int            @default(0)
  stripeCustomerId  String?        @unique @map("stripe_customer_id")
  stripePriceId     String?        @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?  @map("stripe_current_period_end")
  
  @@map("users")
}

// Business ideas generated by users
model BusinessIdea {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String    @db.Text
  category    String
  tags        String[]
  userId      String    @map("user_id") @db.Uuid
  isPublic    Boolean   @default(false) @map("is_public")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedBy     SavedIdea[]

  @@index([userId])
  @@map("business_ideas")
}

// For users to save/bookmark ideas
model SavedIdea {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @map("user_id") @db.Uuid
  businessIdeaId String       @map("business_idea_id") @db.Uuid
  createdAt      DateTime     @default(now()) @map("created_at")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessIdea   BusinessIdea @relation(fields: [businessIdeaId], references: [id], onDelete: Cascade)

  @@unique([userId, businessIdeaId])
  @@map("saved_ideas")
}

//  Subscription plans
model Subscription {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  stripeCustomerId   String   @unique @map("stripe_customer_id")
  stripeSubscriptionId String  @unique @map("stripe_subscription_id")
  stripePriceId      String   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime @map("stripe_current_period_end")
  status             String
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// For trackcing API usage and credits
model CreditTransaction {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  amount      Int
  type        String   // 'earned', 'spent', 'purchased', 'refunded'
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("credit_transactions")
}
